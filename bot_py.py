#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import random
import sqlite3
import itertools
from datetime import datetime
from typing import List, Optional, Dict
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.constants import (
    ParseMode,
    ChatMemberStatus
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)


CLUBS_DB = {
    "England": [
        "Newcastle United", "Tottenham Hotspur", "Chelsea", "Arsenal", "Liverpool",
        "Manchester United", "Manchester City", "Aston Villa", "Crystal Palace",
        "Brighton", "West Ham", "Nottingham Forest"
    ],
    "Italy": [
        "AC Milan", "Inter Milan", "Juventus", "Napoli", "Roma", "Atalanta"
    ],
    "Germany": [
        "Leipzig", "Bayer Leverkusen", "Borussia Dortmund", "Bayern Munich",
        "Frankfurt", "Stuttgart"
    ],
    "Spain": [
        "Real Madrid", "Barcelona", "Atletico Madrid", "Athletic Bilbao", "Sevilla",
        "Real Betis", "Real Sociedad", "Girona", "Villarreal"
    ],
    "France": [
        "Lyon", "Paris Saint-Germain", "Olympique de Marseille", "AS Monaco", "OGC Nice"
    ],
    "Netherlands": ["Ajax", "PSV"],
    "Turkey": ["Galatasaray", "Fenerbah√ße", "Be≈üikta≈ü"],
    "Portugal": ["Benfica", "Sporting"],
    "Saudi Arabia": ["Al Nassr", "Al Hilal", "Al Ittihad"],
    "National teams": [
        "Spain", "Portugal", "Netherlands", "Germany", "Argentina", "France", "England",
        "Italy", "Japan", "South Korea", "Morocco", "Croatia", "Norway", "Sweden", "Denmark"
    ]
}

# –°–º–µ—à–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
MATCH_COMMENTS = [
    "–ì–æ–ª—ã –ª–µ—Ç–µ–ª–∏ –∫–∞–∫ –≥–æ—Ä–æ—Ö –ø–æ —Å—Ç–µ–Ω–µ! üèê",
    "–í—Ä–∞—Ç–∞—Ä–∏ —Å–µ–≥–æ–¥–Ω—è —è–≤–Ω–æ –∑–∞–±—ã–ª–∏ –ø–µ—Ä—á–∞—Ç–∫–∏ –¥–æ–º–∞! ü•Ö", 
    "–ó–∞—â–∏—Ç–Ω–∏–∫–∏ –∏–≥—Ä–∞–ª–∏ –∫–∞–∫ –±—É–¥—Ç–æ –∏—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üëª",
    "–≠—Ç–æ—Ç –º–∞—Ç—á –≤–æ–π–¥–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é... –∏–ª–∏ –Ω–µ—Ç üìö",
    "–ö—Ç–æ-—Ç–æ —è–≤–Ω–æ –ø–µ—Ä–µ–±–æ—Ä—â–∏–ª —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞–º–∏! ‚ö°",
    "–§—É—Ç–±–æ–ª - –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è –∏–≥—Ä–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞—é—Ç —ç—Ç–∏ –¥–≤–æ–µ! üé≤",
    "–ì–æ–ª–∫–∏–ø–µ—Ä —Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –º—è—á –∫–∞–∫ –Ω–∞ –ù–õ–û! üõ∏",
    "–¢–∞–∫—Ç–∏–∫–∞ '–≤—Å–µ –≤ –∞—Ç–∞–∫—É' —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞ –≤—Å–µ 100%! üöÄ",
    "–ó–∞—â–∏—Ç–∞ –¥—ã—Ä—è–≤–µ–µ —á–µ–º —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Å—ã—Ä! üßÄ",
    "–ú—è—á –≤ –≤–æ—Ä–æ—Ç–∞—Ö —á–∞—â–µ —á–µ–º –ø–∏—Ü—Ü–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É! üçï",
    "–ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª —Ñ—É—Ç–±–æ–ª —Å —Ö–æ–∫–∫–µ–µ–º –ø–æ –≥–æ–ª–∞–º! üèí",
    "–í—Ä–∞—Ç–∞—Ä—å —Å–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –∑—Ä–∏—Ç–µ–ª—å —á–µ–º –∏–≥—Ä–æ–∫! üëÄ",
    "–ì–æ–ª—ã —Å—ã–ø–∞–ª–∏—Å—å –∫–∞–∫ –¥–æ–∂–¥—å –≤ –æ–∫—Ç—è–±—Ä–µ! ‚òî",
    "–û–±–æ—Ä–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –≤ —Ä–µ–∂–∏–º–µ '—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã'! üíÖ",
    "–≠—Ç–æ—Ç —Å—á–µ—Ç –≤–∏–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ FIFA –Ω–∞ –ª–µ–≥–∫–æ–º —É—Ä–æ–≤–Ω–µ! üéÆ"
]

LOW_SCORE_COMMENTS = [
    "–ù—É–ª–µ–≤–∫–∞! –í—Ä–∞—Ç–∞—Ä–∏ —Å–µ–≥–æ–¥–Ω—è - —Å—Ç–µ–Ω–∞! üß±",
    "–°–∫—É—á–Ω–æ–≤–∞—Ç–æ... –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ñ–µ –ø–æ–º–æ–∂–µ—Ç? ‚òï",
    "–ì–æ–ª–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ! ‚úã",
    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∞—è –ø–æ–≥–æ–¥–∞ –Ω–∞ –ø–æ–ª–µ - —Å–µ—Ä–æ –∏ —É–Ω—ã–ª–æ! üå´Ô∏è",
    "–ó–∞—â–∏—Ç–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ –∫—Ä–µ–ø–æ—Å—Ç–Ω—ã–µ —Å—Ç–µ–Ω—ã! üè∞",
    "–°—á–µ—Ç –∫–∞–∫ –≤ —à–∞—Ö–º–∞—Ç–∞—Ö - –¥—É–º–∞—é—Ç –¥–æ–ª–≥–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫—Ä–æ–º–Ω—ã–π! ‚ôüÔ∏è",
    "–ú—è—á –≤ –≤–æ—Ä–æ—Ç–∞—Ö —Ä–µ–∂–µ —á–µ–º –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞! üò§"
]

HIGH_SCORE_COMMENTS = [
    "–ü—É—à–∫–∏ —Å—Ç—Ä–µ–ª—è–ª–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞! üí•",
    "–ì–æ–ª–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –≤ –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –Ω–æ—á—å —Å–∞–ª—é—Ç–æ–≤! üéÜ",
    "–í—Ä–∞—Ç–∞—Ä—å —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ –¥–≤–æ—Ä–Ω–∏–∫ –ø–æ—Å–ª–µ –ª–∏—Å—Ç–æ–ø–∞–¥–∞! üçÇ",
    "–°–µ—Ç–∫–∏ —Ä–≤—É—Ç—Å—è –æ—Ç —Ç–∞–∫–æ–π –∫–∞–Ω–æ–Ω–∞–¥—ã! üï≥Ô∏è",
    "–ö—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –≤–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! ‚öôÔ∏è"
]

DRAW_COMMENTS = [
    "–ù–∏—á—å—è! –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤–æ—Å—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ–≤–∞–ª–∞! ‚öñÔ∏è",
    "–ü–æ–¥–µ–ª–∏–ª–∏ –æ—á–∫–∏ –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–µ –¥—Ä—É–∑—å—è! ü§ù",
    "1:1 - —Å—á–µ—Ç –¥–∏–ø–ª–æ–º–∞—Ç–æ–≤! ü§µ",
    "–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—Ç–µ–ª –±—ã—Ç—å –ø–ª–æ—Ö–∏–º –ø–∞—Ä–Ω–µ–º! üòá",
    "–ù–∏—á—å—è - —ç—Ç–æ –∫–æ–≥–¥–∞ –æ–±–∞ —Ö–æ—Ä–æ—à–∏ –∏–ª–∏ –æ–±–∞ —Ç–∞–∫ —Å–µ–±–µ! ü§∑‚Äç‚ôÇÔ∏è"
]

TOURNAMENT_NAME, TOURNAMENT_ROUNDS, TOURNAMENT_PRIZE, ADD_PLAYER_NAME, ADD_PLAYERS_LIST = range(5)

DB_PATH = os.getenv("LEAGUE_DB", "league_v3.db")

def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db()
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    c.execute("""
    CREATE TABLE IF NOT EXISTS tournaments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        prize TEXT,
        rounds INTEGER DEFAULT 2,
        created_at TEXT NOT NULL,
        active INTEGER DEFAULT 1
    );
    """)
    c.execute("""
    CREATE TABLE IF NOT EXISTS players (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tournament_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        club TEXT,
        FOREIGN KEY(tournament_id) REFERENCES tournaments(id)
    );
    """)
    c.execute("""
    CREATE TABLE IF NOT EXISTS matches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tournament_id INTEGER NOT NULL,
        match_number INTEGER NOT NULL,
        home TEXT NOT NULL,
        away TEXT NOT NULL,
        home_goals INTEGER,
        away_goals INTEGER,
        played INTEGER DEFAULT 0,
        FOREIGN KEY(tournament_id) REFERENCES tournaments(id)
    );
    """)
    
    c.execute("PRAGMA table_info(matches)")
    columns = [row[1] for row in c.fetchall()]
    if 'match_number' not in columns:
        c.execute("ALTER TABLE matches ADD COLUMN match_number INTEGER DEFAULT 0")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        c.execute("""
        UPDATE matches 
        SET match_number = id 
        WHERE match_number IS NULL OR match_number = 0
        """)
    
    conn.commit()
    conn.close()

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat = update.effective_chat
    user = update.effective_user

    if chat.type == 'private':
        return True

    try:
        member = await context.bot.get_chat_member(chat.id, user.id)
        return member.status in (ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR)
    except Exception:
        return False

def get_active_tournament(chat_id: int) -> Optional[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM tournaments WHERE chat_id=? AND active=1 ORDER BY id DESC LIMIT 1", (chat_id,))
    row = c.fetchone()
    conn.close()
    return row

def match_no(row: sqlite3.Row) -> int:
    try:
        n = row['match_number']
        return n if n is not None else row['id']
    except Exception:
        return row['id']

def add_tournament(chat_id: int, name: str, prize: str, rounds: int) -> int:
    conn = db()
    c = conn.cursor()
    
    c.execute("UPDATE tournaments SET active=0 WHERE chat_id=?", (chat_id,))
    
    tournament_ids = c.execute("SELECT id FROM tournaments WHERE chat_id=?", (chat_id,)).fetchall()
    for tid in tournament_ids:
        c.execute("DELETE FROM matches WHERE tournament_id=?", (tid['id'],))
        c.execute("DELETE FROM players WHERE tournament_id=?", (tid['id'],))
    
    
    c.execute("""
    INSERT INTO tournaments (chat_id, name, prize, rounds, created_at, active)
    VALUES (?, ?, ?, ?, ?, 1)
    """, (chat_id, name, prize, rounds, datetime.now().isoformat()))
    tid = c.lastrowid
    conn.commit()
    conn.close()
    return tid

def end_tournament(tournament_id: int):
    conn = db()
    c = conn.cursor()
    c.execute("UPDATE tournaments SET active=0 WHERE id=?", (tournament_id,))
    conn.commit()
    conn.close()

# -------------------------
# –ò–≥—Ä–æ–∫–∏ –∏ –∫–ª—É–±—ã
# -------------------------
def add_player(tournament_id: int, name: str):
    conn = db()
    c = conn.cursor()
    c.execute("INSERT INTO players (tournament_id, name) VALUES (?, ?)", (tournament_id, name))
    conn.commit()
    conn.close()

def assign_club(tournament_id: int, name: str, club: str):
    conn = db()
    c = conn.cursor()
    c.execute("UPDATE players SET club=? WHERE tournament_id=? AND name=?", (club, tournament_id, name))
    conn.commit()
    conn.close()

def get_players(tournament_id: int) -> List[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM players WHERE tournament_id=?", (tournament_id,))
    rows = c.fetchall()
    conn.close()
    return rows

def get_players_without_clubs(tournament_id: int) -> List[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM players WHERE tournament_id=? AND (club IS NULL OR club = '')", (tournament_id,))
    rows = c.fetchall()
    conn.close()
    return rows

def get_player_by_id(player_id: int) -> Optional[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM players WHERE id=?", (player_id,))
    row = c.fetchone()
    conn.close()
    return row

def get_player_club(tournament_id: int, name: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—É–± –∏–≥—Ä–æ–∫–∞"""
    conn = db()
    c = conn.cursor()
    c.execute("SELECT club FROM players WHERE tournament_id=? AND name=?", (tournament_id, name))
    row = c.fetchone()
    conn.close()
    return row["club"] if row and row["club"] else None

def assign_random_clubs(tournament_id: int):
    players = get_players(tournament_id)
    all_clubs = [club for clubs in CLUBS_DB.values() for club in clubs]
    random.shuffle(all_clubs)
    conn = db()
    c = conn.cursor()
    for i, player in enumerate(players):
        if i < len(all_clubs):
            c.execute("UPDATE players SET club=? WHERE id=?", (all_clubs[i], player["id"]))
    conn.commit()
    conn.close()

def generate_schedule(tournament_id: int, rounds: int):
    conn = db()
    c = conn.cursor()
    
    c.execute("DELETE FROM matches WHERE tournament_id=?", (tournament_id,))
    
    players = get_players(tournament_id)
    names = [p["name"] for p in players]
    matches = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—Ä—É–≥–∞
    for r in range(rounds):
        for i in range(len(names)):
            for j in range(i + 1, len(names)):  
                if r % 2 == 0:
                    matches.append((names[i], names[j]))
                else:
                    matches.append((names[j], names[i]))
    
    random.shuffle(matches)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –Ω–∞—á–∏–Ω–∞—è —Å 1
    for match_num, (home, away) in enumerate(matches, start=1):
        c.execute("INSERT INTO matches (tournament_id, match_number, home, away) VALUES (?, ?, ?, ?)",
                  (tournament_id, match_num, home, away))
    conn.commit()
    conn.close()

def get_schedule(tournament_id: int, limit: int = None) -> List[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("""
    SELECT * FROM matches
    WHERE tournament_id=? ORDER BY played ASC, match_number ASC
    """ + ("LIMIT ?" if limit else ""), (tournament_id,) + ((limit,) if limit else ()))
    rows = c.fetchall()
    conn.close()
    return rows

def record_result(tournament_id: int, match_id: int, hg: int, ag: int):
    conn = db()
    c = conn.cursor()
    c.execute("""
    UPDATE matches
    SET home_goals=?, away_goals=?, played=1
    WHERE tournament_id=? AND id=?
    """, (hg, ag, tournament_id, match_id))
    conn.commit()
    conn.close()

def get_standings(tournament_id: int) -> List[tuple]:
    players = get_players(tournament_id)
    table = {p["name"]: {"P":0, "W":0, "D":0, "L":0, "GF":0, "GA":0, "GD":0, "PTS":0} for p in players}

    conn = db()
    c = conn.cursor()
    c.execute("SELECT home, away, home_goals, away_goals, played FROM matches WHERE tournament_id=?", (tournament_id,))
    for home, away, hg, ag, played in c.fetchall():
        if not played or hg is None or ag is None:
            continue
        table[home]["P"] += 1
        table[away]["P"] += 1
        table[home]["GF"] += hg; table[home]["GA"] += ag
        table[away]["GF"] += ag; table[away]["GA"] += hg
        if hg > ag:
            table[home]["W"] += 1; table[away]["L"] += 1
            table[home]["PTS"] += 3
        elif hg < ag:
            table[away]["W"] += 1; table[home]["L"] += 1
            table[away]["PTS"] += 3
        else:
            table[home]["D"] += 1; table[away]["D"] += 1
            table[home]["PTS"] += 1; table[away]["PTS"] += 1
    for n in table:
        table[n]["GD"] = table[n]["GF"] - table[n]["GA"]
    conn.close()

    ordered = sorted(table.items(), key=lambda kv: (-kv[1]["PTS"], -kv[1]["GD"], -kv[1]["GF"], kv[0]))
    return ordered

def format_table(tournament_id: int, ordered: List[tuple]) -> str:
    lines = []
    header = f"{'#':<2}{'–ò–≥—Ä–æ–∫':<10}{'–ò':<3}{'–í':<3}{'–ù':<3}{'–ü':<3}{'¬±':<5}{'–û':<3}"
    lines.append(header)
    lines.append("‚îÄ" * len(header))
    for i, (name, st) in enumerate(ordered, start=1):
        club = get_player_club(tournament_id, name)
        short_club = get_short_club_name(club) if club else ""
        if club:
            display_name = f"{name[:6]}({short_club})" if len(name) > 6 else f"{name}({short_club})"
        else:
            display_name = name[:9]
        if len(display_name) > 10:
            display_name = display_name[:9] + "."
        lines.append(f"{i:<2}{display_name:<10}{st['P']:<3}{st['W']:<3}{st['D']:<3}{st['L']:<3}{st['GD']:<4}{st['PTS']:<3}")
    # –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML <pre>, –ù–ò–ö–ê–ö–ò–• –±—ç–∫—Ç–∏–∫–æ–≤
    table = "\n".join(lines)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
    table = (table
             .replace("&", "&amp;")
             .replace("<", "&lt;")
             .replace(">", "&gt;"))
    return f"<pre>{table}</pre>"

def get_active_tournament_prize(tournament_id: int) -> str:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT prize FROM tournaments WHERE id=?", (tournament_id,))
    row = c.fetchone()
    conn.close()
    return row["prize"] if row and row["prize"] else "–ø—Ä–∏–∑"

def get_short_club_name(club: str) -> str:
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    short_names = {
        # England
        "Newcastle United": "NEW", "Tottenham Hotspur": "TOT", "Chelsea": "CHE", 
        "Arsenal": "ARS", "Liverpool": "LIV", "Manchester United": "MUN", 
        "Manchester City": "MCI", "Aston Villa": "AVL", "Crystal Palace": "CRY",
        "Brighton": "BRI", "West Ham": "WHU", "Nottingham Forest": "NFO",
        # Italy  
        "AC Milan": "MIL", "Inter Milan": "INT", "Juventus": "JUV", 
        "Napoli": "NAP", "Roma": "ROM", "Atalanta": "ATA",
        # Germany
        "Leipzig": "LEI", "Bayer Leverkusen": "LEV", "Borussia Dortmund": "BVB",
        "Bayern Munich": "BAY", "Frankfurt": "FRA", "Stuttgart": "STU",
        # Spain
        "Real Madrid": "RMA", "Barcelona": "BAR", "Atletico Madrid": "ATM",
        "Athletic Bilbao": "ATH", "Sevilla": "SEV", "Real Betis": "BET",
        "Real Sociedad": "RSO", "Girona": "GIR", "Villarreal": "VIL",
        # France
        "Lyon": "LYO", "Paris Saint-Germain": "PSG", "Olympique de Marseille": "MAR",
        "AS Monaco": "MON", "OGC Nice": "NIC",
        # Other
        "Ajax": "AJX", "PSV": "PSV", "Galatasaray": "GAL", "Fenerbah√ße": "FEN",
        "Be≈üikta≈ü": "BES", "Benfica": "BEN", "Sporting": "SPO",
        "Al Nassr": "NAS", "Al Hilal": "HIL", "Al Ittihad": "ITT",
        # National teams
        "Spain": "ESP", "Portugal": "POR", "Netherlands": "NED", "Germany": "GER",
        "Argentina": "ARG", "France": "FRA", "England": "ENG", "Italy": "ITA",
        "Japan": "JPN", "South Korea": "KOR", "Morocco": "MAR", "Croatia": "CRO",
        "Norway": "NOR", "Sweden": "SWE", "Denmark": "DEN"
    }
    return short_names.get(club, club[:3].upper())

def get_match_by_id(tournament_id: int, match_id: int) -> Optional[sqlite3.Row]:
    conn = db()
    c = conn.cursor()
    c.execute("SELECT * FROM matches WHERE tournament_id=? AND id=?", (tournament_id, match_id))
    row = c.fetchone()
    conn.close()
    return row

def get_funny_match_comment(home_goals: int, away_goals: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –º–∞—Ç—á–∞"""
    total_goals = home_goals + away_goals
    
    if home_goals == away_goals:
        return random.choice(DRAW_COMMENTS)
    elif total_goals >= 6:
        return random.choice(HIGH_SCORE_COMMENTS)
    elif total_goals <= 1:
        return random.choice(LOW_SCORE_COMMENTS)
    else:
        return random.choice(MATCH_COMMENTS)

def get_funny_message(ordered: List[tuple], prize: str) -> Optional[str]:
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    if not ordered:
        return None
    
    top_score = ordered[0][1]['PTS']
    leaders = [name for name, st in ordered if st['PTS'] == top_score]
    
    leader_messages = [
        f"üëë {leaders[0]} –ø—Ä–∞–≤–∏—Ç –±–∞–ª–æ–º! {prize} —É–∂–µ –ø–∞—Ö–Ω–µ—Ç –ø–æ–±–µ–¥–æ–π!",
        f"üî• {leaders[0]} –≤ –æ–≥–Ω–µ! –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫—É—Ä—è—Ç –≤ —Å—Ç–æ—Ä–æ–Ω–∫–µ!",
        f"‚ö° {leaders[0]} –Ω–∞ –∫–æ–Ω–µ! {prize} –ø–æ—á—Ç–∏ –≤ –∫–∞—Ä–º–∞–Ω–µ!",
        f"üöÄ {leaders[0]} –ª–µ—Ç–∏—Ç –∫ {prize} –∫–∞–∫ —Ä–∞–∫–µ—Ç–∞!",
        f"üëè {leaders[0]} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å! {prize} –∂–¥–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ—Ä–æ—è!"
    ]
    
    tie_messages = [
        f"ü§ù {leaders[0]} –∏ {leaders[1]} –Ω–µ –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è! {prize} –≤ –ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!",
        f"‚öîÔ∏è {leaders[0]} –ø—Ä–æ—Ç–∏–≤ {leaders[1]}! –ë–∏—Ç–≤–∞ –∑–∞ {prize} –Ω–∞–∫–∞–ª—è–µ—Ç—Å—è!",
        f"üé≠ {' VS '.join(leaders)} - –¥—Ä–∞–º–∞ –¥–æ—Å—Ç–æ–π–Ω–∞—è –û—Å–∫–∞—Ä–∞! {prize} –∂–¥–µ—Ç!",
        f"üî• –î—É—ç–ª—å –≤–µ–∫–∞: {' –∏ '.join(leaders)}! {prize} –¥—Ä–æ–∂–∏—Ç –æ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è!"
    ]
    
    chaos_messages = [
        f"üå™Ô∏è –ü–æ–ª–Ω—ã–π —Ö–∞–æ—Å –≤ —Ç—É—Ä–Ω–∏—Ä–µ! {len(leaders)} –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–∞ {prize}!",
        f"üé™ –¶–∏—Ä–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! {len(leaders)} –∫–ª–æ—É–Ω–æ–≤ –±–æ—Ä—é—Ç—Å—è –∑–∞ {prize}!",
        f"üçØ {prize} –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç {len(leaders)} –ø—á–µ–ª! –ö—Ç–æ –ø–µ—Ä–≤—ã–π –¥–æ–±–µ—Ä–µ—Ç—Å—è?",
        f"üé≤ –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω! {len(leaders)} –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ –∑–∞ {prize}!"
    ]
    
    if len(leaders) == 1:
        return random.choice(leader_messages)
    elif len(leaders) == 2:
        return random.choice(tie_messages)
    else:
        return random.choice(chaos_messages)

def get_main_menu_keyboard(is_admin: bool = True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    
    if is_admin:
        keyboard.append([InlineKeyboardButton("üÜï –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä", callback_data="new_tournament")])
    
    keyboard.extend([
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player"),
         InlineKeyboardButton("üë•+ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–∫–æ–º", callback_data="add_players_list")],
        [InlineKeyboardButton("‚öΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–ª—É–±—ã", callback_data="assign_clubs_menu")],
        [InlineKeyboardButton("üìÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="generate_schedule")],
        [InlineKeyboardButton("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule"),
         InlineKeyboardButton("‚öΩ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="record_result")],
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="show_table")]
    ])
    
    if is_admin:
        keyboard.append([InlineKeyboardButton("üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="end_tournament")])
    
    return InlineKeyboardMarkup(keyboard)

def get_players_keyboard(tournament_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—É–±–∞"""
    keyboard = []
    players_without_clubs = get_players_without_clubs(tournament_id)
    
    for i in range(0, len(players_without_clubs), 2):
        row = []
        for j in range(i, min(i + 2, len(players_without_clubs))):
            player = players_without_clubs[j]
            row.append(InlineKeyboardButton(f"üë§ {player['name']}", callback_data=f"select_player_{player['id']}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ –≤—Å–µ–º", callback_data="assign_random")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_countries_keyboard():
    keyboard = []
    countries = list(CLUBS_DB.keys())
    
    for i in range(0, len(countries), 2):
        row = []
        for j in range(i, min(i + 2, len(countries))):
            country = countries[j]
            flag_emoji = get_country_flag(country)
            row.append(InlineKeyboardButton(f"{flag_emoji} {country}", callback_data=f"country_{country}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–æ–∫–∞–º", callback_data="assign_clubs_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_clubs_keyboard(country: str, player_name: str):
    keyboard = []
    clubs = CLUBS_DB.get(country, [])
    
    for i in range(0, len(clubs), 2):
        row = []
        for j in range(i, min(i + 2, len(clubs))):
            club = clubs[j]
            row.append(InlineKeyboardButton(club, callback_data=f"assign_club_{country}_{club}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="select_country")])
    return InlineKeyboardMarkup(keyboard)

def get_matches_keyboard(tournament_id: int, unplayed_only: bool = True):
    keyboard = []
    matches = get_schedule(tournament_id, 100)

    if unplayed_only:
        matches = [m for m in matches if not m['played']]

    if not matches:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])

    for match in matches:
        status = "‚öΩ" if not match['played'] else "‚úÖ"
        hg = match['home_goals'] if match['home_goals'] is not None else "-"
        ag = match['away_goals'] if match['away_goals'] is not None else "-"
        no = match_no(match)

        text_full = f"{status} #{no}: {match['home']} vs {match['away']} [{hg}:{ag}]"
        if len(text_full) > 40:
            home_short = match['home'][:7] if len(match['home']) > 7 else match['home']
            away_short = match['away'][:7] if len(match['away']) > 7 else match['away']
            text_full = f"{status} #{no}: {home_short}-{away_short} [{hg}:{ag}]"

        keyboard.append([InlineKeyboardButton(text_full, callback_data=f"select_match_{match['id']}")])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_score_keyboard(match_id: int, player_name: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ–≤"""
    keyboard = []
    
    for i in range(0, 21, 5): 
        row = []
        for j in range(i, min(i + 5, 11)):
            row.append(InlineKeyboardButton(str(j), callback_data=f"score_{match_id}_{player_name}_{j}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="record_result")])
    return InlineKeyboardMarkup(keyboard)

def get_country_flag(country: str) -> str:
    flags = {
        "England": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø",
        "Italy": "üáÆüáπ",
        "Germany": "üá©üá™", 
        "Spain": "üá™üá∏",
        "France": "üá´üá∑",
        "Netherlands": "üá≥üá±",
        "Turkey": "üáπüá∑",
        "Portugal": "üáµüáπ",
        "Saudi Arabia": "üá∏üá¶",
        "National teams": "üåç"
    }
    return flags.get(country, "‚öΩ")


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_is_admin = await is_admin(update, context)
    await update.message.reply_text(
        "‚öΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tournament Manager!\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—É—Ä–Ω–∏—Ä–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(user_is_admin)
    )

async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_is_admin = await is_admin(update, context)
    await update.message.reply_text(
        "‚öΩ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º:",
        reply_markup=get_main_menu_keyboard(user_is_admin)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    chat_id = update.effective_chat.id
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    user_is_admin = await is_admin(update, context)
    
    if data == "main_menu":
        await query.edit_message_text(
            "‚öΩ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–º:",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif data == "new_tournament":
        if not user_is_admin:
            await query.edit_message_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
        context.user_data['stage'] = 'tournament_name'
    
    elif data == "add_players_list":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ü—Ä–∏–º–µ—Ä: –ê–º–∏—Ä, –î–∏–∞—Å, –í–ª–∞–¥")
        context.user_data['stage'] = 'add_players_list'
    
    elif data == "record_result":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        await query.edit_message_text(
            "‚öΩ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n\n"
            "‚öΩ - –Ω–µ —Å—ã–≥—Ä–∞–Ω, ‚úÖ - –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=get_matches_keyboard(t['id'], unplayed_only=True)
        )
    
    elif data.startswith("select_match_"):
        match_id = int(data[13:])
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return

        match = get_match_by_id(t['id'], match_id)
        if not match:
            await query.edit_message_text("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ç—á–∞
        if match['played']:
            await query.edit_message_text(
                f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω: {match['home']} {match['home_goals']}:{match['away_goals']} {match['away']}",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return

        context.user_data['selected_match_id'] = match_id
        context.user_data['selected_match'] = dict(match)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π dict
        context.user_data['match_scores'] = {}

        no = match_no(match)
        await query.edit_message_text(
            f"‚öΩ –ú–∞—Ç—á #{no}: {match['home']} vs {match['away']}\n\n"
            f"–°–∫–æ–ª—å–∫–æ –≥–æ–ª–æ–≤ –∑–∞–±–∏–ª {match['home']}?",
            reply_markup=get_score_keyboard(match_id, match['home'])
        )
    
    elif data.startswith("score_"):
        parts = data[6:].split("_", 3)
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return
            
        match_id = int(parts[0])
        player_name = parts[1]
        goals = int(parts[2])

        match = context.user_data.get('selected_match')
        if not match:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –≤—ã–±—Ä–∞–Ω.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return

        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return

        context.user_data.setdefault('match_scores', {})
        context.user_data['match_scores'][player_name] = goals

        no = match_no(match)

        if len(context.user_data['match_scores']) == 1:
            # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ
            other_player = match['away'] if player_name == match['home'] else match['home']
            await query.edit_message_text(
                f"‚öΩ –ú–∞—Ç—á #{no}: {match['home']} vs {match['away']}\n"
                f"‚úÖ {player_name}: {goals} –≥–æ–ª–æ–≤\n\n"
                f"–°–∫–æ–ª—å–∫–æ –≥–æ–ª–æ–≤ –∑–∞–±–∏–ª {other_player}?",
                reply_markup=get_score_keyboard(match_id, other_player)
            )
        else:
            # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥
            home_goals = context.user_data['match_scores'].get(match['home'], 0)
            away_goals = context.user_data['match_scores'].get(match['away'], 0)

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É played —Å—Ç–∞—Ç—É—Å–∞
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
            record_result(t['id'], match_id, home_goals, away_goals)

            match_comment = get_funny_match_comment(home_goals, away_goals)

            ordered = get_standings(t['id'])
            prize = get_active_tournament_prize(t['id'])
            msg = format_table(t['id'], ordered)
            fun = get_funny_message(ordered, prize)

            result_text = (
                f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω!\n"
                f"‚öΩ –ú–∞—Ç—á #{no}: {match['home']} {home_goals}:{away_goals} {match['away']}\n\n"
                f"{match_comment}\n\n"
                f"{msg}"
            )

            await query.edit_message_text(
                result_text,
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )

            if fun:
                await query.message.reply_text(fun)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('selected_match_id', None)
            context.user_data.pop('selected_match', None)
            context.user_data.pop('match_scores', None)
    
    elif data == "add_player":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:")
        context.user_data['stage'] = 'add_player_name'
    
    elif data == "assign_clubs_menu":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        players_without_clubs = get_players_without_clubs(t['id'])
        if not players_without_clubs:
            await query.edit_message_text(
                "‚úÖ –í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫–ª—É–±—ã!",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        await query.edit_message_text(
            f"‚öΩ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—É–±–æ–≤ –∏–≥—Ä–æ–∫–∞–º\n\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–ª—É–±–æ–≤: {len(players_without_clubs)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞:",
            reply_markup=get_players_keyboard(t['id'])
        )
    
    elif data.startswith("select_player_"):
        player_id = int(data[14:])  # —É–±–∏—Ä–∞–µ–º "select_player_"
        player = get_player_by_id(player_id)
        if not player:
            await query.edit_message_text(
                "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        context.user_data['selected_player_id'] = player_id
        context.user_data['selected_player_name'] = player['name']
        
        await query.edit_message_text(
            f"üë§ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫: {player['name']}\n\n"
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—É–±–∞:",
            reply_markup=get_countries_keyboard()
        )
    
    elif data == "select_country":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player_name = context.user_data.get('selected_player_name', '–∏–≥—Ä–æ–∫')
        await query.edit_message_text(
            f"üë§ –í—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫: {player_name}\n\n"
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—É–±–∞:",
            reply_markup=get_countries_keyboard()
        )
    
    elif data.startswith("country_"):
        country = data[8:]  
        player_name = context.user_data.get('selected_player_name', '–∏–≥—Ä–æ–∫')
        context.user_data['selected_country'] = country
        
        await query.edit_message_text(
            f"üë§ –ò–≥—Ä–æ–∫: {player_name}\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {get_country_flag(country)} {country}\n\n"
            f"‚öΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±:",
            reply_markup=get_clubs_keyboard(country, player_name)
        )
    
    elif data.startswith("assign_club_"):
        parts = data[12:].split("_", 1)  
        country = parts[0]
        club = parts[1]
        
        player_id = context.user_data.get('selected_player_id')
        player_name = context.user_data.get('selected_player_name')
        
        if not player_id or not player_name:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–ª—É–± –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
        assign_club(t['id'], player_name, club)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏–≥—Ä–æ–∫–µ
        context.user_data.pop('selected_player_id', None)
        context.user_data.pop('selected_player_name', None)
        context.user_data.pop('selected_country', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∏–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–ª—É–±–æ–≤
        remaining_players = get_players_without_clubs(t['id'])
        if remaining_players:
            await query.edit_message_text(
                f"‚úÖ {player_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–ª—É–± {get_country_flag(country)} {club}!\n\n"
                f"üë• –ò–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–ª—É–±–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {len(remaining_players)}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞:",
                reply_markup=get_players_keyboard(t['id'])
            )
        else:
            await query.edit_message_text(
                f"‚úÖ {player_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–ª—É–± {get_country_flag(country)} {club}!\n\n"
                "üéâ –í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫–ª—É–±—ã! –ú–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
    
    elif data == "assign_random":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        assign_random_clubs(t['id'])
        await query.edit_message_text(
            "üé≤ –ö–ª—É–±—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å–ª—É—á–∞–π–Ω–æ!",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif data == "generate_schedule":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        generate_schedule(t['id'], t['rounds'])
        await query.edit_message_text(
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif data == "show_schedule":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return
        sched = get_schedule(t['id'])
        if not sched:
            await query.edit_message_text("üìã –ù–µ—Ç –º–∞—Ç—á–µ–π. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=get_main_menu_keyboard(user_is_admin))
            return

        lines = ["üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ú–ê–¢–ß–ï–ô:\n"]
        for m in sched:
            status = "‚úÖ" if m['played'] else "‚è≥"
            hg = m['home_goals'] if m['home_goals'] is not None else "-"
            ag = m['away_goals'] if m['away_goals'] is not None else "-"
            no = match_no(m)

            home_short = m['home'][:8] if len(m['home']) > 8 else m['home']
            away_short = m['away'][:8] if len(m['away']) > 8 else m['away']

            lines.append(f"{status} #{no}: {home_short} vs {away_short} [{hg}:{ag}]")

        await query.edit_message_text("\n".join(lines), reply_markup=get_main_menu_keyboard(user_is_admin))
    
    elif data == "show_table":
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        ordered = get_standings(t['id'])
        msg = format_table(t['id'], ordered)
        await query.edit_message_text(
            f"üìä –¢–£–†–ù–ò–†–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê:\n\n{msg}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif data == "end_tournament":
        if not user_is_admin:
            await query.edit_message_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
            
        t = get_active_tournament(chat_id)
        if not t:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        ordered = get_standings(t['id'])
        end_tournament(t['id'])
        winner = ordered[0][0] if ordered else "–Ω–∏–∫—Ç–æ"
        prize = get_active_tournament_prize(t['id'])
        msg = format_table(t['id'], ordered)
        
        winner_messages = [
            f"üéä –ë–∞—Ä–∞–±–∞–Ω–Ω–∞—è –¥—Ä–æ–±—å... –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {winner}!",
            f"üëë {winner} ‚Äî –Ω–æ–≤—ã–π –∫–æ—Ä–æ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞!",
            f"üèÜ {winner} –∑–∞–±–∏—Ä–∞–µ—Ç {prize} –¥–æ–º–æ–π!",
            f"‚ö° {winner} ‚Äî –≥–µ–Ω–∏–π —Ñ—É—Ç–±–æ–ª–∞!"
        ]
        
        winner_msg = random.choice(winner_messages)
        
        await query.edit_message_text(
            f"üèÜ –¢—É—Ä–Ω–∏—Ä '{t['name']}' –æ–∫–æ–Ω—á–µ–Ω!\n"
            f"{winner_msg}\n\n{msg}",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'stage' not in context.user_data:
        return

    stage = context.user_data['stage']
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    user_is_admin = await is_admin(update, context)

    if stage == 'tournament_name':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        if not user_is_admin:
            context.user_data['stage'] = None
            await update.message.reply_text(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
            
        context.user_data['new_tournament'] = {'name': text}
        context.user_data['stage'] = 'tournament_rounds'
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–æ–≤? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2):")
    
    elif stage == 'tournament_rounds':
        # –ó–¥–µ—Å—å —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–∞—á–∞—Ç
        rounds = int(text) if text.isdigit() else 2
        context.user_data['new_tournament']['rounds'] = rounds
        context.user_data['stage'] = 'tournament_prize'
        await update.message.reply_text("–ö–∞–∫–æ–π –ø—Ä–∏–∑?")
    
    elif stage == 'tournament_prize':
        # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∞
        prize = text if text else "–ø—Ä–∏–∑"
        context.user_data['new_tournament']['prize'] = prize
        
        tid = add_tournament(
            chat_id,
            context.user_data['new_tournament']['name'],
            prize,
            context.user_data['new_tournament']['rounds']
        )
        context.user_data['stage'] = None
        
        await update.message.reply_text(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä '{context.user_data['new_tournament']['name']}' —Å–æ–∑–¥–∞–Ω!\n"
            f"üèÜ –ü—Ä–∏–∑: {prize}\n"
            f"üîÑ –ö—Ä—É–≥–æ–≤: {context.user_data['new_tournament']['rounds']}\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –∏–º –∫–ª—É–±—ã:",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif stage == 'add_player_name':
        t = get_active_tournament(chat_id)
        if not t:
            context.user_data['stage'] = None
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        add_player(t['id'], text)
        context.user_data['stage'] = None
        
        await update.message.reply_text(
            f"‚úÖ –ò–≥—Ä–æ–∫ {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä!",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )
    
    elif stage == 'add_players_list':
        t = get_active_tournament(chat_id)
        if not t:
            context.user_data['stage'] = None
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return

        player_names = [name.strip() for name in text.split(',') if name.strip()]
        
        if not player_names:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–º–µ—Ä: –ê–º–∏—Ä, –î–∏–∞—Å, –í–ª–∞–¥",
                reply_markup=get_main_menu_keyboard(user_is_admin)
            )
            return
        
        added_count = 0
        for name in player_names:
            if len(name) > 0 and len(name) <= 50: 
                add_player(t['id'], name)
                added_count += 1
        
        context.user_data['stage'] = None
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {added_count}\n"
            f"üë• –°–ø–∏—Å–æ–∫: {', '.join(player_names[:10])}{'...' if len(player_names) > 10 else ''}",
            reply_markup=get_main_menu_keyboard(user_is_admin)
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
async def cmd_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = get_active_tournament(update.effective_chat.id)
    if not t:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.")
        return
    if len(context.args) != 2:
        await update.message.reply_text("üìù –§–æ—Ä–º–∞—Ç: /result ID X-Y\n–ü—Ä–∏–º–µ—Ä: /result 1 2-1")
        return
    
    try:
        match_id = int(context.args[0])
        score = context.args[1].split("-")
        if len(score) != 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á—ë—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ X-Y")
            return
        hg, ag = int(score[0]), int(score[1])
        record_result(t['id'], match_id, hg, ag)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        match_comment = get_funny_match_comment(hg, ag)
        
        ordered = get_standings(t['id'])
        prize = get_active_tournament_prize(t['id'])
        msg = format_table(t['id'], ordered)
        fun = get_funny_message(ordered, prize)
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω!\n{match_comment}\n\n{msg}",
            parse_mode=ParseMode.HTML
        )
        if fun:
            await update.message.reply_text(fun)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /result ID X-Y")

# -------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------
def main():
    init_db()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN")
    
    app = Application.builder().token(token).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("menu", cmd_menu))
    app.add_handler(CommandHandler("result", cmd_result))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
    
    app.run_polling()

if __name__ == "__main__":
    main()